#include <iostream>
#include <queue>

using namespace std;

//19.07.19.금.
//라이브러리를 이용하는 게 아닌 구조체와 배열을 이용해서
//큐를 사용하는 방법에 대해 배워보자. 강사님이 가르쳐 주신 방법..
//현직자들은 stl 쓰면 안된다고 하니.. 이해를 해봅시다.

int n;
int map[100+10][100+10];
int ray[100+10][100+10];

struct pos
{
	int x, y'
}q[100*100*100];//크게 만들어 주는군요..

int r, w;
int dir[4][2]={{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
#define INF=987654321;

void bfs(void)
{
	struct pos temp; //현재 위치를 담으려는 변수.
	int ny, nx, i; //새로운 위치.
	
	//read write를 증가증가.
	while(r<w)
	{
		//큐를 읽는 것은 이렇게 하고요. 읽어온 후에 r값을 증가시킨다.
		//다음으로 읽을 친구를 위해서.
		temp=q[r++];

		//4방 탐색.
		for(i=0;i<4;i++)
		{
			nx=temp.x+dir[i][0];
			ny=temp.y+dir[i][1];

			//범위를 벗어나면 틀린 것.
			if((nx<1)||(nx>n)||(ny<1)||(ny<n)) continue;
			
			//새로운 위치의 ray 값이 현재 값에서 새로운 위치 값을 더한 것보다 크다면
			//갱신할 필요가 있는거죠. 
			if(ray[ny][nx]>map[ny][nx]+ray[temp.y][temp.x])
			{
				ray[ny][nx]=map[ny][nx]+ray[temp.y][temp.x];
				
				//큐에 집어넣는 건 이렇게 하는군요.
				q[w].x=nx;
				q[w].y=ny;
				w++;
			}
		}
	}
}

int main()
{
	int i, j;
	scanf("%d", &n);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j+=)
		{
			scanf("%1d", &map[i][j]);
			ray[i][j]=INF;//초기화는 엄청 큰 수를 넣어준다.
			//작아야 가기 때문이겠지.
		}
	}

	return 0;
}
