#include <iostream>
#include <queue>

using namespace std;

/*
19.07.19.금.
문제: 자외선 피하기
최단경로를 찾기 위해서 sum을 계산하는 배열을 하나 더 두었고, 갔던 곳을 다시 갈 수 있도록
check값이 1이라도 sum값이 더 작아질 경우 갈 수 있도록 큐에 넣어줬다.
비교하면서 갱신해나가는 게 중요..
*/

int n;
int arr[100][100];
int check[100][100];
int dir[4][2]={{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
int ans=1000000000;
int sum[100][100];

bool isinside(int y, int x)
{
	if(y>=0&&y<n&&x>=0&&x<n)
		return true;
	else
		return false;
}

void bfs(int y, int x)
{
	check[y][x]=1;
	queue<pair<int, int>> q;
	q.push(make_pair(y, x));

	while(!q.empty())
	{
		int cy = q.front().first;
		int cx = q.front().second;
		q.pop();

		//마지막에 도달했다면
		if(cy==n-1&&cx==n-1)
		{
			//sum값 비교해서 가장 작은 값 넣어준다.
			if(sum[n-1][n-1]<ans)
				ans=sum[n-1][n-1];
		}

		for(int i=0;i<4;i++)
		{
			int ny=cy+dir[i][0];
			int nx=cx+dir[i][1];
			
			//체크를 한 곳도 갈 수 있도록 해주는 게 필요하다.
			if(isinside(ny, nx))
			{
				if(check[ny][nx]!=0)//이미 방문한 곳.
				{
					//하지만 내가 새로 만드는 sum값이 더 작다면, 그 위치의 sum값을 갱신해주고 갈 수 있게 해준다.
					if(sum[cy][cx]+arr[ny][nx]<sum[ny][nx])
					{
						sum[ny][nx]=sum[cy][cx]+arr[ny][nx];.
						q.push(make_pair(ny, nx));
					}
					else
						continue;//간 곳이면서 내가 가는 비용이 더 든다면 갈 필요 없다.
				}
				else{//방문 안한곳이라면 이전처럼 넣어준다.
					check[ny][nx]=1;
					sum[ny][nx]=sum[cy][cx]+arr[ny][nx];
					q.push(make_pair(ny, nx));
				}
			}
		}	
	}	
}


int main()
{
	cin>>n;
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			scanf("%1d", &arr[i][j]);

	bfs(0, 0);
	cout<<ans<<endl;

	return 0;
}
