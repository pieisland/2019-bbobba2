#include <iostream> 
#include <queue>

using namespace std; 

/*
2019.07.17.수.
토마토. bfs로 풀었고, 처음 익은 토마토가 들어있는 모든 위치를 넣어주고 풀어야 하는 문제.
큐에 여러 개가 들어간 채로 시작해도 된다는 말이다.
그리고 토마토의 익은 것을 체크하기 위해서 배열에 값을 저장해 확인을 하는 것보다
처음에 안 익은 토마토의 개수를 세어서 체크를 하는 것이 효율이 더 좋다.
연산이 줄어드니까! 좋은 팁을 얻었다.
*/

int y, x;
int arr[1000][1000]; //토마토 위치 상태 저장.
int check[1000][1000]; //지나간 곳인지 체크한다.
int dir[4][2]={{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; //방향이동. 남, 북, 서, 동.
int ans;
int tomato;//익지 않은 토마토의 개수.
queue<pair<int, int>> q;

//범위에 있는가?
bool isinside(int a, int b)
{
	if(a>=0&&a<y&&b>=0&&b<x)
		return true;
	else
		return false;
}

//시작하는 위치를 받아와 bfs를 수행한다.
void bfs()
{
	while(!q.empty())
	{
		int cy = q.front().first;
		int cx=q.front().second;
		q.pop();

		if(check[cy][cx]>ans)
			ans=check[cy][cx];

		for(int i=0;i<4;i++)
		{
			int ny=cy+dir[i][0];
			int nx=cx+dir[i][1];
			if(isinside(ny, nx)&&check[ny][nx]==0&&arr[ny][nx]==0)
			{
				check[ny][nx]=check[cy][cx]+1;
				tomato--;//익은 토마토 주위에 있는 안 익은 토마토는 익게 되므로 값을 1 감소시킨다.
				q.push(make_pair(ny, nx));
			}
		}
	}
}

int main()
{
	cin>>x>>y;
	//토마토 값 넣기.

	for(int i=0;i<y;i++)
		for(int j=0;j<x;j++)
		{
			cin>>arr[i][j];
			if(arr[i][j]==1)//익은 토마토다.
			{
				q.push(make_pair(i, j));
				check[i][j]=1;//먼저 넣어주면 됩니다.
			}
			else if(arr[i][j]==0)
				tomato++;//안 익은 토마토의 개수를 센다.
		}

	//안 익은 토마토의 개수가 0이라면 처음부터 다 익어있는 상태인 것.
	if(tomato==0){
		cout<<0<<endl;
	}
	else //안 익은 토마토가 하나라도 있다면 bfs를 수행해본다.
	{
		bfs();
		if(tomato>0)//익을 때마다 안 익은 것을 제거해줬는데 안 익은 게 있다면
			cout<<-1<<endl; //결국 다 익히지 못한 것.
		else //그렇지 않다면 시간을 출력한다.
			cout<<ans-1<<endl;
	}

	return 0;
}
