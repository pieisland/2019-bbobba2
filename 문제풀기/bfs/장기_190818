#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;

/*
2019.08.18.일.
처음으로 stl안쓰고 풀었다.
큐 크기 잡아주는 것 때문에 두 번이나 틀렸네..;
100*100 이상으로 잡아줘야되나봐. 왜그런지는 모르겠는데...
솔직히...
그냥 좀 넉넉하게 잡아줘야겠다. 설명 좀 제대로 들을걸.
*/

int arr[101][101];
int n, m; //행, 열
int r, c, s, k;
int dir[8][2] = { {1, 2}, {-1, 2}, {1, -2}, {-1, -2}, {2, 1}, {2, -1}, {-2, 1}, {-2, -1} };
int check[101][101];
int ans=10000;

int isinside(int y, int x)
{
	if (y >= 1 && y <= n && x >= 1 && x <= m)
		return 1;
	else
		return 0;
}

//어차피 최단거리 보장해주지 않나?

void bfs()
{
	int queue[11000][2] = {0,};
	int rear = 0, front = 0;

	int cy = r;
	int cx = c;
	queue[front][0] = cy;//이렇게 하는 거 맞냐..
	queue[front++][1] = cx;

	//큐가 빌 때까지
	while (rear<=front)
	{
		//하나 빼낸다.
		cy = queue[rear][0];
		cx = queue[rear++][1];
		
		//목적지에 도착했다면
		if (cy == s && cx == k)
		{
			//cout << check[cy][cx] << endl;
			if (check[cy][cx]<ans)
			{
				ans = check[cy][cx];
			}
		}

		for (int i = 0; i < 8; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];

			//범위에 맞고 가지 않은 길이라면
			if (isinside(ny, nx) && check[ny][nx] == 0)
			{
				queue[front][0] = ny;
				queue[front++][1] = nx;
				check[ny][nx] = check[cy][cx] + 1;
			}
		}
	}
}

int main()
{
	cin >> n >> m;
	cin >> r >> c >> s >> k;
	
	bfs();
	cout << ans << endl;

	return 0;
}
