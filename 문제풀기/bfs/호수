#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.09.02.월.
*/

int n;
int map[100][100];
int check[100][100];
int dir[8][2] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };

int isinside(int y, int x)
{
	if (y >= 0 && y < n && x >= 0 && x < n) return 1;
	else return 0;
}

void bfs(int y, int x)
{
	queue<pair<int, int>> q;
	check[y][x] = 1;
	q.push(make_pair(y, x));

	while (!q.empty())
	{
		int cy = q.front().first;
		int cx = q.front().second;
		q.pop();
			
		//얘는 팔방향으로 움직이니까
		for (int i = 0; i < 8; i++)
		{
			int ny = cy + dir[i][0];
			int nx = cx + dir[i][1];
			if (isinside(ny, nx) && map[ny][nx] == 1 && check[ny][nx] == 0)
			{
				q.push(make_pair(ny, nx));
				check[ny][nx] = 1;
			}
		}
	}
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			scanf("%1d", &map[i][j]);
		}
	}

	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] == 1 && check[i][j] == 0) {
				bfs(i, j);
				ans++;
			}
		}
	}

	cout << ans << endl;
	
	return 0;
}
