#include <iostream> 
#include <queue>

using namespace std; 

/*
2019.07.17.수.
기본 bfs 문제였다. 근데..
범위 체크하는 것 때문에 계속 틀렸다...
시작 위치가 1, 2 이런 걸로 0 없이 주어지는 경우에는
그것때문에 배열의 0번을 버리고 시작해야 된다.
그래서 또 값이 범위 안에 있는지 체크하는 부분에서도
변경을 해야되기 때문에... 이래저래
안나오게 되는 이상한 경우도 있으니 주의하길 바란다.
*/

int x, y;
int arr[101][101];
int check[101][101];
int dir[4][2]={{1, 0}, {-1, 0}, {0,1}, {0,-1}};
int sx, sy, ex, ey;

bool isinside(int yy, int xx)
{
	if(yy>0&&yy<=y&&xx>0&&xx<=x)
		return true;
	else
		return false;
}

void bfs(int ay, int ax)
{
	queue<pair<int, int>> q;
	q.push(make_pair(ay, ax));
	
	//간 곳이라고 해줍니다. 마지막에 1만 빼주면 된다사실.
	check[ay][ax]=1;

	while(!q.empty())
	{
		//cout<<"과연 어디에서 문제가 났나.."<<endl;
		int cy = q.front().first;
		int cx = q.front().second;
		q.pop();

		//목적지에 도달했으면, 
		if(cy==ey&&cx==ex)
		{
			cout<<check[cy][cx]-1<<endl;
			return;
		}

		//dir에 따라서 움직이면서 파악한다.
		for(int i=0;i<4;i++)
		{
			int ny=cy+dir[i][0];
			int nx=cx+dir[i][1];

			//범위에 맞고, 아직 가지 않은 길이고, 그 값이 갈 수 있는 곳이라면
			if(isinside(ny, nx)&&check[ny][nx]==0&&arr[ny][nx]==0)
			{
				check[ny][nx]=check[cy][cx]+1;
				q.push(make_pair(ny, nx));
			}
		}
	}
}

int main()
{
	cin>>x>>y;
	cin >> sx >> sy >> ex >> ey;

	//수를 입력받는다.
	for(int i=1;i<=y;i++)
		for(int j=1;j<=x;j++)
			scanf("%1d",&arr[i][j]);

	bfs(sy, sx);

	return 0;
}
