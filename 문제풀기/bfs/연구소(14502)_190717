#include <iostream> 
#include <queue>

using namespace std; 

/*
2019.07.17.수.
연구소. bfs로 풀었고, 벽 세 개의 위치를 고르고 저장하는 데 시간이 많이 걸렸다.
뭔가 저장하기 위한 구조도 헷갈리고.. 사실 어떻게 해야되는지도 몰라서 그냥 3중 포문을 돌렸다.
구조체까지 만들어버렸는데 그렇게까지 할 필요가 있는건지는 사실 의문이다.
그리고 최대 값이 8밖에 되지 않기 때문에 다행히도 시간초과가 안 난 듯하다.(근데 비쥬얼에서 돌리면 2초 넘던데..??)
다른 사람들 코드를 봐야 될 것 같다.
*/

int y, x;
int arr[8][8]; //연구소 상태 저장.
int arr2[8][8]; //벽이 세 개 추가로 세워진 연구소 상태 저장.
int check[8][8]; //지나간 곳인지 체크한다.
int dir[4][2]={{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; //방향이동. 남, 북, 서, 동.
int ans; //안전 영역의 값

//세 개의 벽을 세울 위치를 저장할 구조체.
typedef struct newWall
{
	int y1, x1, y2, x2, y3, x3;
}Wall;

//그 구조체를 저장할 벡터.
vector<Wall> vwall;

//범위에 있는가?
bool isinside(int a, int b)
{
	if(a>=0&&a<y&&b>=0&&b<x)
		return true;
	else
		return false;
}

//시작하는 위치를 받아와 bfs를 수행한다.
void bfs(int a, int b)
{
	queue<pair<int, int>> q;
	q.push(make_pair(a, b));
	check[a][b]=1;
	
	while(!q.empty())
	{
		int cy = q.front().first;
		int cx=q.front().second;
		q.pop();

		for(int i=0;i<4;i++)
		{
			int ny=cy+dir[i][0];
			int nx=cx+dir[i][1];
			if(isinside(ny, nx)&&check[ny][nx]==0&&arr2[ny][nx]==0)
			{
				check[ny][nx]=1;
				arr2[ny][nx]=2;//바이러스가 퍼진다.
				q.push(make_pair(ny, nx));
			}
		}
	}
}

int main()
{
	cin>>y>>x;

	//벽이 안 세워진 곳(0)의 좌표를 담는 벡터.
	vector<pair<int, int>> vec;
	
	for(int i=0;i<y;i++)
		for(int j=0;j<x;j++)
		{
			cin>>arr[i][j];
			arr2[i][j]=arr[i][j];//arr2는 arr의 값을 저장한 후 추가로 벽을 세운다.
			
			if(arr[i][j]==0)//벽이 안 세워진 곳을 벡터에 담는다.
				vec.push_back(make_pair(i, j));
		}

	//벽이 세워지지 않은 곳 중 세 곳을 골라 구조체에 담아주고 그 구조체를 벡터에 또 담는다.
	for(int i=0;i<vec.size()-2;i++)
		for(int j=i+1;j<vec.size()-1;j++)
			for(int k=j+1;k<vec.size();k++)
			{
				Wall w;
				w.y1=vec[i].first;
				w.x1=vec[i].second;

				w.y2=vec[j].first;
				w.x2=vec[j].second;

				w.y3=vec[k].first;
				w.x3=vec[k].second;

				vwall.push_back(w);
			}

	//담은 좌표들로 bfs를 수행해본다.
	for(int i=0;i<vwall.size();i++)
	{
		//구조체에 저장된 값으로 벽을 세 군데 세운다.
		arr2[vwall[i].y1][vwall[i].x1]=1;
		arr2[vwall[i].y2][vwall[i].x2]=1;
		arr2[vwall[i].y3][vwall[i].x3]=1;

		//arr2에 바이러스를 퍼뜨린다.
		for(int a=0;a<y;a++)
			for(int b=0;b<x;b++)
			{
				if(check[a][b]==0&&arr2[a][b]==2)
				{
					bfs(a, b);
				}
			}

		//bfs로 바이러스가 다 퍼진 후에 안전영역의 개수를 센다.
		int safe=0;
		for(int a=0;a<y;a++)
			for(int b=0;b<x;b++)
			{
				if(arr2[a][b]==0)
					safe++;
			}

		//구한 안전영역의 값을 계속해서 ans와 비교해가며 ans를 큰 값으로 만들어준다.
		if(safe>ans)
			ans=safe;

		//다시 새로운 벽으로 세우기 위해 arr 값으로 arr2를 초기화 해준다.
		//check 배열의 값도 0으로 만들어준다.
		for(int a=0;a<y;a++)
			for(int b=0;b<x;b++)
			{
				arr2[a][b]=arr[a][b];
				check[a][b]=0;
			}
	}
	
	//가장 큰 안전영역의 값을 출력한다.
	cout<<ans<<endl;
	
	return 0;
}
