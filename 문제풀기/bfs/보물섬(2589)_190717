#include <iostream> 
#include <queue>

using namespace std; 

/*
2019.07.17.수.
보물섬. bfs로 풀었고, 모든 경우를 다 따져봐야 한다.
시작할 수 있는 모든 길로 시작을 해봐서 가장 먼 거리를 찾는다.
*/

int y, x;
char arr[50][50]; //지도 값을 저장한다.
int check[50][50]; //지나온 길인지 체크한다.
int ans; //가장 먼 길의 값.
int dir[4][2]={{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; //방향이동. 남, 북, 서, 동.

//범위에 있는가?
bool isinside(int a, int b)
{
	if(a>=0&&a<y&&b>=0&&b<x)
		return true;
	else
		return false;
}

//check를 초기화 해서 재사용하기.
void checkclear()
{
	for(int i=0;i<y;i++)
		for(int j=0;j<x;j++)
			check[i][j]=0;
}

//시작하는 위치를 받아와 bfs를 수행한다.
void bfs(int yy, int xx)
{
	queue<pair<int, int>> q;
	q.push(make_pair(yy, xx));
	check[yy][xx]=1;

	while(!q.empty())
	{
		int cy = q.front().first;
		int cx=q.front().second;
		q.pop();

    //가장 큰 값으로 바꿔준다.
		if(ans<check[cy][cx])
			ans=check[cy][cx];

		for(int i=0;i<4;i++)
		{
			int ny=cy+dir[i][0];
			int nx=cx+dir[i][1];
			if(isinside(ny, nx)&&check[ny][nx]==0&&arr[ny][nx]=='L')
			{
				check[ny][nx]=check[cy][cx]+1;
				q.push(make_pair(ny, nx));
			}
		}
	}
}

int main()
{
	cin>>y>>x;
  //지도 값 넣기.
	for(int i=0;i<y;i++)
		for(int j=0;j<x;j++)
		{
			cin>>arr[i][j];		
		}
	
  //모든 가능한 시작위치를 다 따져본다.
	for(int i=0;i<y;i++)
		for(int j=0;j<x;j++)
		{
			if(check[i][j]==0&&arr[i][j]=='L')
			{
				bfs(i, j);
				checkclear();//memset(check, 0, sizeof(check));//check 배열 초기화.
			}
		}

  //초기 위치 값을 1로 줬기 때문에 정답은 1을 하나 빼줘야 한다.
	cout<<ans-1<<endl;
	return 0;
}
