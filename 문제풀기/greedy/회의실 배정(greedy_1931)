#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.07.04.목.
회의실 배정. greedy.
회의를 가장 많이 하기 위해 어떻게 회의실을 배정해야 하나?
회의의 시작 시간과 끝 시간을 고려할 때,
회의가 빨리 끝날수록 다른 회의를 더 할 수 있게 된다.
그래서 빨리 끝나는 회의를 1순위로 잡아서 정렬을 한다.
만약, 끝나는 시간이 같다면 시작 시간이 빠른 순으로 정렬한다.
그래야 하자마자 끝나는 회의를 포함할 수 있기 때문이다... ㅠ.ㅠ
*/

//끝나는 시간이 같다면 시작 시간이 빠른 순으로, 
//끝나는 시간이 다르다면 빨리 끝나는 순으로.
bool cmp(pair<int, int> a, pair<int, int> b)
{
	if (a.second == b.second)
		return a.first < b.first;
	else
		return a.second < b.second;
}

int main(){

	int n; //회의의 개수
	cin >> n;
	int s, e;

	//회의 정보를 담을 벡터. (n)을 하면 벡터 원소도 바로 n개 만들 수 있다.
	vector<pair<int, int>> con(n);
	for (int i = 0; i < n; i++)
	{
		cin >> s >> e;
		con[i].first = s; //시작시간과
		con[i].second = e; //끝 시간을 넣는다.
	}

	//아까 말한 기준에 따라 정렬한다.
	sort(con.begin(), con.end(), cmp);

	int et = 0;//회의가 끝나는 시간
	int cnt = 0;
	for (int i = 0; i < n; i++)
	{
		//어떤 회의가 회의가 끝난 시간 이상의 회의 시작시간을 가진다면
		if (et <= con[i].first)
		{
			//그 회의를 다음 회의로 결정하고, 결정된 회의의 마지막 시간을 회의가 끝나는 시간으로 변경한다.
			et = con[i].second;
			cnt++;
		}
	}

	//총 진행할 수 있는 회의
	cout << cnt << endl;

	return 0;
}
