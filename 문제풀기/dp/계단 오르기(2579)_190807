#include<cstdio>
#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
#include<string>

using namespace std;

/*
2019.08.06.화.
계단 오르기(2579)
다이나믹 프로그래밍. 메모이제이션.
어떻게 움직일 수 있는지를 파악해야된다.

이 문제에서는 연속적으로 3칸을 오를 수 없기 때문에
n번째 칸에 오를 수 있는 두 경우가 존재한다.
1. n-3번째 칸을 오르고 n-1번째 칸을 오른 후 n번째 칸에 오를 수 있고
2. n-2번째 칸을 오르고 n번째 칸에 오를 수 있다.

앞부터 값을 저장해서 저장한 값을 이용해서 
마지막 n-1번째 칸에(사실은 n번째 칸) 오른 결과를 출력하면 된다.
*/

int stair[300]; //모든 계단의 점수 저장
int d[300]; //d[0]번째 계단을 올랐을 때 최대로 얻을 수 있는 수.

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;
	for (int i = 0; i < n;i++)
		cin >> stair[i];

	d[0] = stair[0]; //첫번째 칸은 당연히 내 점수.
	d[1] = stair[0] + stair[1]; //두 번째 칸을 오르는 최대값은 당연히 1번 오르고 2번 오르는 것.
	d[2] = max(stair[0] + stair[2], stair[1] + stair[2]); //세번째 칸부터 경우의 수가 생기기 시작. 둘 중 큰 것 선택.

	//네 번째 칸부터 n번째 칸까지 구해보자.
	for (int i = 3; i < n; i++)
	{
		d[i] = max(d[i - 3] + stair[i - 1] + stair[i], d[i-2] + stair[i]);
	}

	cout << d[n-1] << endl;

	return 0;
}
