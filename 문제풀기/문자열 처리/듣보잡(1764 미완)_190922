#include <string>
#include <vector>
#include <iostream>
#include <queue>
#include <stdio.h>
#include <cstring> //memset 사용을 위함
#include <math.h> //pow 사용을 위함
#include <algorithm>

using namespace std;

int n, m;
vector<string> v1(n);
vector<string> v2;

//바이너리서치를 하면 복잡도가 줄어드나봅니다.
bool binarysearch(int start, int end, string str)
{
	if (start > end) return false;
	else
	{
		int mid = (start + end) / 2;

		//v1에 그 값이 있었다면
		if (!v1[mid].compare(str))
			return true;
		else if (v1[mid] > str) //찾는 게 앞에 있다면
			return binarysearch(start, mid - 1, str);
		else
			return binarysearch(mid + 1, end, str);
	}
}

int main()
{

	cin >> n >> m;

	string tmp;
	for (int i = 0; i < n; i++)
		cin >> v1[i];

	sort(v1.begin(), v1.end());

	for (int i = 0; i < m; i++) {
		string str;
		cin >> str;

		//v1에 해당하는 게 있는지 찾는다.
		if (binarysearch(0, v1.size() - 1, str))
		{
			v2.push_back(str);
		}
	}

	/*vector<string> db;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (v1[i] == v2[j])
			{
				db.push_back(v1[i]);
				break;
			}
		}
	}*/

	sort(v2.begin(), v2.end());
	cout << v2.size() << endl;
	for (int i = 0; i < v2.size(); i++)
		cout << v2[i] << endl;

	return 0;
}
