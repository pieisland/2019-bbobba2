#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <cstring>
#include <algorithm>

using namespace std;

/*
190926 목요일.
당황했던 문제.. 뭐 어떻게 하라는거냐 싶었다.
배열이 크기가 달라지다니. 
하지만 다행히도 100이 최대이기 때문에 그냥 100개를 만들어두면 되는거더라.

정렬의 기준이 두 개가 있어서 그걸 사용하기 위해 
sort 함수의 세 번째 인자를 사용할 줄 알아야 풀 수 있는 문제인 것 같다.
https://namnamseo.tistory.com/entry/stdsort%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%A0%95%EB%A0%AC
이전에 이런 sort 세 번째를 사용해야 되는 경우가 있어서
이 사이트를 보면서 이해했었다. 생소하신 분들은 보시면 도움이 될 듯.

numcnt 라는 배열을 만들어서 어떤 수가 몇 개 있는지를 셌다.
그리고 그 수가 0이 아니라면 
st라는 구조체에 num과 many 변수에 해당 수와 개수를 담아 v벡터에 넣어줬다. 
그걸 sort 함수를 이용해서 기준대로 정렬 후 그 결과를 arr 배열에 넣어줬다.
사실 arr2라는 배열을 새로 만들어서 넣어 준 후에 arr에 복사함.
arr에 그대로 넣으려다가 생각해보니
arr를 압축해서 원래 길이보다 작아질 수가 있는데 
작아진 길이 이후의 값에 다른 수가 적혀있으면 다음 단계에서 수를 잘못 세니까.
그렇게 했다.

정답률은 40을 넘는데, 그냥 사람들이 잘하는 것 같다.
나는 오래 걸렸거든... 정답률만 보고 쉬운 문제인 줄 알았잖아....
다른 분들 어떻게 풀었는지는 아직 안찾아봤는데.... 더 빨리 푸는 방법이 있을라나.
*/

//배열을 담는다.
int arr[101][101];

//어떤 숫자가 몇 개 있는지 저장.
typedef struct
{
	int num;
	int many;
} st;

//정렬 기준에 맞게 숫자와 개수 정렬
bool cmp(st a, st b)
{
	//개수가 같으면 수 자체가 커지는 순으로 정렬
	if (a.many == b.many)
		return a.num < b.num;
	else //개수가 다르면 몇 개인지가 커지는 순으로 정렬
		return a.many < b.many;
}

//확인용 함수
void show(int r, int c)
{
	cout << r << c << endl;

	for (int i = 1; i <= r; i++) {
		for (int j = 1; j <= c; j++)
		{
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}

	cout << endl;
}

int main(){

	int r, c, k;

	cin >> r >> c >> k;
	
	//일단 초기 배열은 3x3 입니다. 하기 쉽도록 1부터 넣는다.
	for(int i=1;i<=3; i++)
		for (int j = 1; j <= 3; j++)
			cin >> arr[i][j];

	int go = 0;
	int rcnt = 3, ccnt = 3;
	while (1)
	{
		//cout << "go : " << go << endl;
		int arr2[101][101] = { 0, };

		//이것때메 한 번 틀리고 옴. 100까지는 되는거.
		if (go > 100) {
			cout << -1 << endl;
			break;
		}
		
		//찾는 위치에 있다면 얼마나 실행했는지 출력하고 끝.
		if (arr[r][c] == k)
		{
			cout << go << endl;
			break;
		}

		//행의 수와 열의 수를 비교해서 하는 연산이 다름.
		if (rcnt >= ccnt)
		{
			int cmax = ccnt; //열의 수 최대값을 저장.
			for (int i = 1; i <= rcnt; i++) //모든 행에 대해서
			{
				int numcnt[101] = { 0, }; //어떤 수가 몇 개가 있는지 저장함
				vector<st> v; //수와 그 수의 개수를 저장할 구조체를 저장할 벡터
				for (int j = 1; j <= ccnt; j++) //모든 열에 대해서 어떤 수가 몇 개 있는지 센다.
					numcnt[arr[i][j]]++;

				//전체에서. 어차피 최대가 100이니까 100으로 함.
				for (int k = 1; k <= 100; k++)
				{
					//해당 숫자가 없으면 넘어가고
					if (numcnt[k] == 0) continue;
					st s; //숫자가 있다면 구조체에 담아서 벡터에 넣어준다.
					s.num = k; //있는 숫자.
					s.many = numcnt[k]; //걔는 몇 개 있음.
					v.push_back(s);
				}

				//원하는 정렬 기준에 맞게 정렬.
				sort(v.begin(), v.end(), cmp);
			
				//cout << "here you go" << endl;
				//for (int i = 0; i < v.size(); i++)
				//	cout << v[i].num << " " << v[i].many << endl;
				
				//배열에 넣어주기 위해
				int pos = 1; //배열 인덱스
				int vsize = v.size(); //벡터 사이즈
				if (vsize > 50) vsize = 50; //숫자와 개수가 저장돼 있기 때문에 50개 넘으면 50개로 잘라줌.
				if (cmax <= vsize*2) cmax = vsize*2; //열의 최대값 저장.
				//cout << cmax << " value" << endl;

				//cout << vsize <<" : " << cmax << endl;

				//arr에 덮어쓰기 전에 arr2에 먼저 저장해서 나중에 덮어씀.
				//무작정 덮어쓰다가 안지워지는 부분때문에 잘못된 결과가 나올 수 있음.
				for (int idx = 0; idx < vsize; idx++)
				{
					arr2[i][pos++] = v[idx].num; //해당 수와
					arr2[i][pos++] = v[idx].many; //개수를 넣어준다.
					if (pos > 100) break; //근데 이미 vsize 조절해줘서 이거 안해도 될 듯.
				}
			}
			ccnt = cmax; //열 길이의 최대값을 갱신. 
		}
		else //행보다 열의 길이가 더 길 경우. 앞이랑 매우 비슷.
		{
			int rmax = rcnt;
			for (int i = 1; i <= ccnt; i++) //모든 열에 대해
			{
				int numcnt[101] = { 0, };
				vector<st> v;

				for (int j = 1; j <= rcnt; j++) //모든 행에 대해
					numcnt[arr[j][i]]++; //인덱스 좀 다르고.

				for (int k = 1; k <= 100; k++)
				{
					if (numcnt[k] == 0) continue;
					st s;
					s.num = k;
					s.many = numcnt[k];
					v.push_back(s);
				}
				sort(v.begin(), v.end(), cmp);

				//cout << "here you go" << endl;
				//for (int i = 0; i < v.size(); i++)
				//	cout << v[i].num << " " << v[i].many << endl;

				int pos = 1;
				int vsize = v.size();
				if (vsize > 50) vsize = 50;
				if (rmax <= vsize*2) rmax = vsize*2;

				//cout << vsize << " "<<rmax <<endl;

				for (int idx = 0; idx < vsize; idx++)
				{
					arr2[pos++][i] = v[idx].num;
					arr2[pos++][i] = v[idx].many;
					if (pos > 100) break;
				}
			}
			rcnt = rmax;
		}
		go++; //실행 횟수 증가.

		//arr2 값을 arr에 넣어준다
		for (int i = 1; i <= 100; i++)
			for (int j = 1; j <= 100; j++)
				arr[i][j] = arr2[i][j];

		//show(rcnt, ccnt);
	}

	return 0;
}
