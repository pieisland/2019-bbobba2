#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
#include<math.h>
using namespace std;

/*
2019.08.05.월.
왜 모음을 쟤네로만 보는지 모르겠는데 ㅎ.ㅎ;;
dfs를 사용한다.

어떤 걸 넘겨줘야되는지 차근차근 생각해보자.
현재 어떤 문자열을 만들려고 하고 있는데,
문자열의 갯수에 맞게 선택해야된다.
마지막 조건이 될 갯수 파라미터, 그리고 지금 사용할 문자열, 내가 이때까지 만든 문자열,
다음으로 선택할 문자의 문자열에서의 인덱스.

종료조건으로, 만든 애의 길이가 구하는 애랑 같다면 일단 확인을 하고,
개수가 안 맞는데 인덱스 값이 넘어가면 망한 거구요.

그리고 현재 인덱스가 가리키고 있는 문자열을 추가할지 안할지를 선택해야되서
하는 경우와 안하는 경우로 나누어서 두 번의 dfs를 수행한다.

근데 이걸 혼자 풀 수 있을까..?

*/

int l, c;
char a[15];

bool check(string s)
{
	int ja=0;
	int mo=0;

	for(int i=0;i<s.length(); i++)
	{
		//모음이 이 쟤들밖에 없다고..?? y랑 w는요..?
		if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')
			mo+=1;
		else
			ja+=1;
	}

	return ja>=2&&mo>=1;
}

void dfs(int len, char *arr, string s, int idx)
{
	if(len==s.size())
	{
		if(check(s))
			cout <<s<<endl;
		return ;
	}
	//이건 그냥.. 음.. 어차피 len으로 하면 되지 않나..?
	//인덱스가 c를 넘어가면 없는 거니까요.
	if(idx>=c) return;

	//현재 애를 사용하고 사용 안하고 
	//구하려는 길이는 같고, 사용하는 배열도 같고, 내가 지금 만드는 애에다가 뭐 더하는지가 다르고,
	dfs(len, arr, s+arr[idx], idx+1);
	dfs(len, arr, s, idx+1);	
}


int main()
{
	cin.tie(0);
	cin>>l>>c;
	for(int i=0;i<c;i++)
		cin>>a[i];

	//문자열 정렬해야된다.
	sort(a, a+c);

	string s="";

	//만들어야 하는 암호의 길이, 사용 알파벳
	//현재까지 만든 암호와
	//사용할지 말지 결정해야 하는 알파벳 인덱스
	dfs(l, a, s, 0);
}
