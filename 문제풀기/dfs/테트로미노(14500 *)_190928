#include <iostream>
#include <vector>
#include <string>
#include <queue>
#include <cstring>
#include <algorithm>
#include <math.h>

using namespace std;

/*
https://wjdgus2951.tistory.com/89
이분 정말 깔끔하게 잘 푸셨다. 감사합니다. 이해하고 갑니다.

190928 토요일.
테트로미노가 dfs 문제였구나.
노가다로 풀었는데 그마저도 틀려서... 
이해가 안됐었음.
하나의 모양 제외하고는 dfs로 풀리는 문제라서
그렇게 하는거였다.
*/

int n, m;
int arr[500][500];
int visit[500][500];
int ans;
int dir[4][2] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };

bool isinside(int y, int x) {
	if (y >= 0 && y < n && x >= 0 && x < m) return true;
	else return false;
}

void dfs(int y, int x, int cnt, int sum) {
	
	//4개를 모두 선택했다면 이제 ans 값과 비교한다.
	//항상 헷갈리는 거지만 0, 1, 2, 3 일 때 더해지기 때문에
	//4가 되면 이미 4개가 더해진거다.
	if (cnt == 4) {
		if (ans < sum)
			ans = sum;
		return;
	}

	//네 방향으로 이동.
	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];

		//이미 선태한 애면 지나가고 
		if (visit[ny][nx] == 1) continue;

		//선택 안했고 범위가 맞다면 이제 선택해보자
		//해제하는 건 꼭 해야한다.
		if (isinside(ny, nx)) {
			visit[ny][nx] = 1;
			dfs(ny, nx, cnt + 1, sum + arr[ny][nx]);
			visit[ny][nx] = 0;
		}
	}
}

//ㅗ 모양은 따로 해줘야 한다.
void except(int y, int x)
{
	//일단 얘를 중심으로 생각한다,
	int sum = arr[y][x];
	//특이한 건 min값을 구해서
	//내 주변의 4개의 값 중에서 제일 작은 값을 구해서
	//그 값을 빼준 게 가장 큰 값이 되는 거니까.
	int minval = 100000000;
	int cnt = 0;

	//4방향으로 갑니다.
	for (int i = 0; i < 4; i++) {
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];

		//범위 맞으면 더해주자. 개수도 세주고.
		if (isinside(ny, nx)) {
			sum += arr[ny][nx];
			cnt++;
			if (arr[ny][nx] < minval) {
				minval = arr[ny][nx];
			}
		}
	}

	//4개가 다 만족이 되어서 네 개를 모두 더했다면
	//네 개 중에서 제일 작은 걸 빼줘야 테트로미노 모양이고
	//그게 최대다.
	if (cnt == 4) {
		sum -= minval;//제일 작은 값 주구..
	}

	//세 개 두 개 한 개 밖에 안됐으면 사실
	//그게 더 큰 값일 리가 없어서 ans 값이 변하지 않는다.
	//그래서 걱정 안해도 된다.
	//솔직히 제대로 하려면 이것도 저 위에 if 문 안에 있어야 함.
	if (ans < sum) ans = sum;
}

int main(){

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			
			//첫 시작이니까 visit이 1인 경우는
			//없을거다. dfs에서 한 번 간 길에 대해서
			//해제도 해주기 떄문에.
			visit[i][j] = 1;
			dfs(i, j, 0, 0);
			visit[i][j] = 0;
			except(i, j);
		}
	}

	cout << ans << endl;

	return 0;
}
