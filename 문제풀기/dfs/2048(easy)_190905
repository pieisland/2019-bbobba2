#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
#include<math.h>
using namespace std;

/*
19.09.05.목.
2048(easy)
이게 easy면 hard는 도대체 어떤 수준인 것인가..
시간 엄청 걸렸고 고려해야 할 사항들이 많아서 좀 복잡했다.

이 문제에서 주의할 점은 움직이기 이전 값의 정보를
전역변수가 아닌 지역변수에 저장해야 한다는 것이라고 생각한다.
그것때메 틀리고 옴..;;
전역변수에 저장하면 저장된 값이 다른 데서도 사용이 되니까 
다시 값을 되돌릴 때 이상하게 되돌려진다.

또 다른 주의할 점은 합쳐졌는지의 여부를 따지는 것.
check를 통해서 이미 합쳐진 값인지 아닌지를 확인해야한다.

상하좌우에 따라서 함수를 만들다보니 되게 자잘하게 다른데도
오래 걸리고 코드도 길고. 수정이 가능한건지 모르겠네.
그리고 나의 경우 값을 합치고 공백없이 당기는 부분을 나눠서 했는데
한꺼번에 할 수는 없는건지 의문.

인덱스가 너무 헷갈려.....


**2차원 배열을 매개변수로 전달하는 방법
-argument(전달인자) 작성 시에는 배열 이름(주소)을 적어주면 된다.
ex)
int arr[5][5];
func(arr);

-parameter(매개변수) 작성 시에는 배열의 두 번째.. [][] 뭐라 해야되냐 아무튼 그 개수 적어주면 된다. 앞에건 비워두고.
ex)
void func(int a[][5])
{
	//
}

전달인자는 함수 호출 시 전달 되는 실제 값이고
매개변수는 함수의 정의 부분에 나열되어 있는 변수다.

a 전 호
p 매 정 

*/

int n;
int map[20][20];
//int tmap[20][20];
int check[20][20];
int ans;

void showmap()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << map[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
}

//위로 움직임
void up()
{
	//동일한 값이 있을 때 한 번만 더해지게 한다.
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] != 0) //0이 아닌 값일 때만 윗줄에 있는 값을 찾음
			{
				int t = i - 1;
				while (1)
				{
					if (t < 0) break;
					if (map[t][j] != 0) break;
					t--;
				}
				if (t < 0) continue; //윗줄에 값이 없음을 의미
				else if (map[i][j] == map[t][j]) //동일한 값이라면 두 배 해준다.
				{
					if (check[t][j] == 1) continue; //이미 더한 값이라면 해주면 안된다.
					map[t][j] *= 2;
					map[i][j] = 0; //내 값은 0으로
					check[t][j] = 1; //다시 더하지 않도록 함.
				}
			}
		}
	}

	//더해진 값을 공백 없이 차곡차곡 위로 당김.
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] != 0) //당겨야 할 값을 찾았고
			{
				int t = i - 1;
				while (1)
				{
					if (t < 0) break;
					if (map[t][j] != 0) break;
					t--;
				}
				if (t < 0) //앞에 값들이 없다면
				{
					if (i == 0) continue; //어차피 0번째에 있었다면 움직일 필요가 없다.
					map[0][j] = map[i][j]; //0번쨰로 옮겨준다.
					map[i][j] = 0;
				}
				else //앞에 값이 t위치에 있다면
				{
					if (t + 1 == i) continue; //바로 밑 줄에 있는 경우라면 움직이지 않는다.
					map[t + 1][j] = map[i][j]; //t+1줄로 옮겨주고
					map[i][j] = 0; //삭제
				}
			}
		}
	}

	//체크는 한 번 움직일 때만 쓰고 다시 초기화 해줘야 한다.
	memset(check, 0, sizeof(check));
}

//아래로 움직임
void down()
{
	//위로 움직이는 것과 마찬가지지만, 밑에서부터 찾는다.
	for (int i = n-1; i >= 0; i--)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] != 0)
			{
				int t = i + 1; //내 밑에 있는 값의 위치를 찾기.
				while (1)
				{
					if (t > n-1) break;
					if (map[t][j] != 0) break;
					t++;
				}
				if (t > n-1) continue;
				else if (map[i][j] == map[t][j])
				{
					if (check[t][j] == 1) continue;
					map[t][j] *= 2;
					map[i][j] = 0;
					check[t][j] = 1;
				}
			}
		}
	}

	for (int i = n-1; i >= 0; i--)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] != 0)
			{
				int t = i + 1;
				while (1)
				{
					if (t > n-1) break;
					if (map[t][j] != 0) break;
					t++;
				}
				if (t > n-1)
				{
					if (i == n-1) continue;
					map[n-1][j] = map[i][j];
					map[i][j] = 0;
				}
				else
				{
					if (t - 1 == i) continue;
					map[t - 1][j] = map[i][j];
					map[i][j] = 0;
				}
			}
		}
	}

	memset(check, 0, sizeof(check));
}

//오른쪽으로 움직임
void right()
{
	for (int j = n-1; j >= 0; j--) //x 기준으로 움직이며 찾는다. 안헷갈리기만 하면 될 듯.
	{
		for (int i = 0; i < n; i++)
		{
			if (map[i][j] != 0)
			{
				int t = j + 1;
				while (1)
				{
					if (t > n-1) break;
					if (map[i][t] != 0) break;
					t++;
				}
				if (t > n-1) continue;
				else if (map[i][j] == map[i][t])
				{
					if (check[i][t] == 1) continue;
					map[i][t] *= 2;
					map[i][j] = 0;
					check[i][t] = 1;
				}
			}
		}
	}

	for (int j = n-1; j >= 0; j--) //x
	{
		for (int i = 0; i < n; i++)
		{
			if (map[i][j] != 0)
			{
				int t = j + 1;
				while (1)
				{
					if (t > n-1) break;
					if (map[i][t] != 0) break;
					t++;
				}
				if (t > n-1)
				{
					if (j == n-1) continue;
					map[i][n-1] = map[i][j];
					map[i][j] = 0;
				}
				else
				{
					if (t - 1 == j) continue;
					map[i][t - 1] = map[i][j];
					map[i][j] = 0;
				}
			}
			
		}
	}

	memset(check, 0, sizeof(check));
}

//왼쪽으로 움직임
void left()
{
	for (int j = 0; j < n; j++) //x
	{
		for (int i = 0; i < n; i++)
		{
			if (map[i][j] != 0)
			{
				int t = j - 1;
				while (1)
				{
					if (t < 0) break;
					if (map[i][t] != 0) break;
					t--;
				}
				if (t < 0) continue;
				else if (map[i][j] == map[i][t])
				{
					if (check[i][t] == 1) continue;
					map[i][t] *= 2;
					map[i][j] = 0;
					check[i][t] = 1;
				}
			}
		}
	}

	for (int j = 0; j < n; j++) //x
	{
		for (int i = 0; i < n; i++)
		{
			if (map[i][j] != 0)
			{
				int t = j - 1;
				while (1)
				{
					if (t < 0) break;
					if (map[i][t] != 0) break;
					t--;
				}
				if (t < 0)
				{
					if (j == 0) continue;
					map[i][0] = map[i][j];
					map[i][j] = 0;
				}
				else
				{
					if (t + 1 == j) continue;
					map[i][t + 1] = map[i][j];
					map[i][j] = 0;
				}
			}
		}
	}

	memset(check, 0, sizeof(check));
}

//옮기기 이전 값을 저장
void mapToTmp(int temp[][20])
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			temp[i][j] = map[i][j];
}

//저장한 이전 값으로 되돌림
void tmpToMap(int temp[][20])
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			map[i][j] = temp[i][j];
}

void dfs(int cnt, int dir)
{
	int tmap2[20][20] = { 0, };

	//5번 돌았으므로 가장 큰 값을 찾음
	if (cnt == 5)
	{
		int tmp = 0;
		for(int i=0;i<n;i++)
			for (int j = 0; j < n; j++)
			{
				if (map[i][j] > tmp) tmp = map[i][j];
			}

		if (ans < tmp) ans = tmp;

		return;
	}

	//방향에 맞게 움직임
	switch (dir)
	{
	case 0: 
		up();
		break;
	case 1:
		down();
		break;
	case 2:
		left();
		break;
	case 3:
		right();
		break;
	}

	//4방향에 대해서 dfs를 돌림
	for (int i = 0; i < 4; i++)
	{
		mapToTmp(tmap2); //map 변경 전 원래 상태를 tmap에 저장.
		dfs(cnt + 1, i);
		tmpToMap(tmap2); //map을 원래 상태로 되돌림.
	}

	return;
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> map[i][j];

	int tmap[20][20] = { 0 };
	for (int i = 0; i < 4; i++)
	{
		mapToTmp(tmap);
		dfs(0, i);
		tmpToMap(tmap);
	}

	cout << ans << endl;

	return 0;
}
