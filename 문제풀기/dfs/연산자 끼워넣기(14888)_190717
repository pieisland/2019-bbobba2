#include <iostream>
#include <algorithm>

using namespace std;

/*
19.07.17.수.
연산자 끼워넣기(14888). DFS, 브루트 포스.
ㅎㅎㅎ. 내가 처음에 했던 생각은,
연산자를 정렬하는 모든 경우의 수를 구해서
string으로 저장해 하나씩 char를 빼면서 비교해 연산하려고 했으나
모든 경우의 수를 구할 수 있는 방법이 도저히 생각나지 않았다. 
그래서 결국 구글링. 한 네 분 정도를 봤는데 다들 쉽다고.. 하더라 하하.
작성 코드는 이 분이 푸신 것(https://jaimemin.tistory.com/635). 제일 깔끔하고 이해하기 쉬웠다.
세상에 똑똑한 사람들이 많아서 정말 다행이야...(?)

DFS를 많이 풀어보지 않아서 다른 사람들은 쉽다고 하는 문제를 접근조차 못했다.
DFS, 백트래킹, 브루트 포스 문제를 많이 풀어봐야 함을 느꼈다.

모든 경우의 수를 구해야 할 때는 DFS! DFS는 재귀! 스택!
*/

int n; //수의 개수
int arr[11]; //수를 담을 배열
int op[4]; //연산자 각각의 개수
int maxval=-1000000; //연산 결과 중 가장 큰 값
int minval=1000000; //연산 결과 중 가장 작은 값

//dfs 호출. 각 연산자의 개수와, 깊이와, 연산한 결과를 넘긴다. 우선순위를 무시하기 때문에 그나마 편하다.
void dfs(int plus, int minus, int multiply, int divide, int depth, int sum)
{
	//n-1개의 연산자를 모두 사용했다면,(n의 깊이까지 와서 연산이 끝났다면)
	if(depth==n)
	{
		//최대값과 최소값을 찾는다.
		if(sum>maxval)
			maxval=sum;
		if(sum<minval)
			minval=sum;
		return; //종료!
	}

	//재귀함수를 통해 모든 가능한 경우의 수를 찾는다.
	//사용할 수 있는 연산자가 남아 있는 경우 사용하러 간다. 헷갈리지 않도록 조심...
	//이렇게 하면 답이 구해진다는 게 참.. 신기하다.
	if(plus>0)
		dfs(plus-1, minus, multiply, divide, depth+1, sum+arr[depth]);
	if(minus>0)
		dfs(plus, minus-1, multiply, divide, depth+1, sum-arr[depth]);
	if(multiply>0)
		dfs(plus, minus, multiply-1, divide, depth+1, sum*arr[depth]);
	if(divide>0)
		dfs(plus, minus, multiply, divide-1, depth+1, sum/arr[depth]);
}

int main(void)
{
	//수를 받는다.
	cin >>n;
	for(int i=0;i<n;i++)
	{
		cin >> arr[i];
	}

	//연산자의 개수를 받는다.
	for(int i=0;i<4;i++)
	{
		cin >> op[i];
	}

	//깊이 1로 들어가며 dfs를 시작한다. 첫 결과값은 받은 첫번째 숫자이다.
	dfs(op[0], op[1], op[2], op[3], 1, arr[0]);
    
	//dfs 연산 후 결과 출력.
	cout<<maxval<<endl<<minval<<endl;

	return 0;
}
