#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<cstring>
#include<queue>
using namespace std;

/*
19.09.01.일.
알파벳(1987)
dfs 백트래킹 문제.
다른 알파벳 찾으며 갈 수 있는 최대 경로의 길이를 구하는 문제.

이미 지나온 길이라면 alpha에 저장이 되기 때문에
check를 따로 만들 필요는 없는 것 같다.
*/

int r, c;
char arr[21][21];
int alpha[26];
int ans;
int dir[4][2] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };

int isinside(int y, int x)
{
	if (y >= 0 && y < r && x >= 0 && x < c) return 1;
	else return 0;
}

//위치와 몇 번갔는지.
void dfs(int y, int x, int depth)
{
	if (ans < depth) ans = depth;

	//모든 방향에 대해
	for (int i = 0; i < 4; i++)
	{
		int ny = y + dir[i][0];
		int nx = x + dir[i][1];
		if (isinside(ny, nx)) //범위에 맞다면
		{
			int tmp = arr[ny][nx] - 65;
			//cout << tmp << endl;

			//이미 지나온 길이라면 안 가고
			if (alpha[tmp]) continue;

			//아니라면 간다.
			alpha[tmp] = 1;
			dfs(ny, nx, depth + 1);
			alpha[tmp] = 0;
			//다시 해제해서 백트래킹 가능하도록.
		}
	}
}

int main()
{
	cin >> r >> c;

	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			cin >> arr[i][j];
		}
	}

	//시작점이 정해져있으니까 처음에 방문했다고 해줘야 함.
	int tmp = arr[0][0] - 65;
	alpha[tmp] = 1;
	dfs(0, 0, 1);

	//int tmp = 'A' - 65;
	//cout << tmp << endl;
	
	cout << ans << endl;

	return 0;
}
